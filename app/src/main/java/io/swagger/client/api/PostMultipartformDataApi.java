/*
 * API V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostMultipartformDataApi {
    private ApiClient apiClient;

    public PostMultipartformDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostMultipartformDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1PostsIdAttachedAttachedIdDelete
     * @param id id (required)
     * @param attachedId attached_id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdAttachedAttachedIdDeleteCall(String id, String attachedId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/posts/{id}/attached/{attached_id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "attached_id" + "\\}", apiClient.escapeString(attachedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1PostsIdAttachedAttachedIdDeleteValidateBeforeCall(String id, String attachedId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1PostsIdAttachedAttachedIdDelete(Async)");
        }
        // verify the required parameter 'attachedId' is set
        if (attachedId == null) {
            throw new ApiException("Missing the required parameter 'attachedId' when calling apiV1PostsIdAttachedAttachedIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1PostsIdAttachedAttachedIdDeleteCall(id, attachedId, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete post attached file
     * 
     * @param id id (required)
     * @param attachedId attached_id (required)
     * @param authorization JWT token for Authorization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1PostsIdAttachedAttachedIdDelete(String id, String attachedId, String authorization) throws ApiException {
        apiV1PostsIdAttachedAttachedIdDeleteWithHttpInfo(id, attachedId, authorization);
    }

    /**
     * delete post attached file
     * 
     * @param id id (required)
     * @param attachedId attached_id (required)
     * @param authorization JWT token for Authorization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1PostsIdAttachedAttachedIdDeleteWithHttpInfo(String id, String attachedId, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = apiV1PostsIdAttachedAttachedIdDeleteValidateBeforeCall(id, attachedId, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * delete post attached file (asynchronously)
     * 
     * @param id id (required)
     * @param attachedId attached_id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdAttachedAttachedIdDeleteAsync(String id, String attachedId, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1PostsIdAttachedAttachedIdDeleteValidateBeforeCall(id, attachedId, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiV1PostsIdPut
     * @param postTitle  (required)
     * @param postBody  (required)
     * @param postFiles  (required)
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdPutCall(String postTitle, String postBody, File postFiles, String id, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/posts/{id}/"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (postTitle != null)
        localVarFormParams.put("post[title]", postTitle);
        if (postBody != null)
        localVarFormParams.put("post[body]", postBody);
        if (postFiles != null)
        localVarFormParams.put("post[files]", postFiles);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1PostsIdPutValidateBeforeCall(String postTitle, String postBody, File postFiles, String id, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'postTitle' is set
        if (postTitle == null) {
            throw new ApiException("Missing the required parameter 'postTitle' when calling apiV1PostsIdPut(Async)");
        }
        // verify the required parameter 'postBody' is set
        if (postBody == null) {
            throw new ApiException("Missing the required parameter 'postBody' when calling apiV1PostsIdPut(Async)");
        }
        // verify the required parameter 'postFiles' is set
        if (postFiles == null) {
            throw new ApiException("Missing the required parameter 'postFiles' when calling apiV1PostsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1PostsIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1PostsIdPutCall(postTitle, postBody, postFiles, id, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update multipart form
     * 
     * @param postTitle  (required)
     * @param postBody  (required)
     * @param postFiles  (required)
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1PostsIdPut(String postTitle, String postBody, File postFiles, String id, String authorization) throws ApiException {
        apiV1PostsIdPutWithHttpInfo(postTitle, postBody, postFiles, id, authorization);
    }

    /**
     * update multipart form
     * 
     * @param postTitle  (required)
     * @param postBody  (required)
     * @param postFiles  (required)
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1PostsIdPutWithHttpInfo(String postTitle, String postBody, File postFiles, String id, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = apiV1PostsIdPutValidateBeforeCall(postTitle, postBody, postFiles, id, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * update multipart form (asynchronously)
     * 
     * @param postTitle  (required)
     * @param postBody  (required)
     * @param postFiles  (required)
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdPutAsync(String postTitle, String postBody, File postFiles, String id, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1PostsIdPutValidateBeforeCall(postTitle, postBody, postFiles, id, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiV1PostsPost
     * @param postTitle  (required)
     * @param postBody  (required)
     * @param postCategoryId  (required)
     * @param postFiles  (required)
     * @param authorization JWT token for Authorization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsPostCall(String postTitle, String postBody, Integer postCategoryId, File postFiles, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/posts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (postTitle != null)
        localVarFormParams.put("post[title]", postTitle);
        if (postBody != null)
        localVarFormParams.put("post[body]", postBody);
        if (postCategoryId != null)
        localVarFormParams.put("post[category_id]", postCategoryId);
        if (postFiles != null)
        localVarFormParams.put("post[files]", postFiles);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1PostsPostValidateBeforeCall(String postTitle, String postBody, Integer postCategoryId, File postFiles, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'postTitle' is set
        if (postTitle == null) {
            throw new ApiException("Missing the required parameter 'postTitle' when calling apiV1PostsPost(Async)");
        }
        // verify the required parameter 'postBody' is set
        if (postBody == null) {
            throw new ApiException("Missing the required parameter 'postBody' when calling apiV1PostsPost(Async)");
        }
        // verify the required parameter 'postCategoryId' is set
        if (postCategoryId == null) {
            throw new ApiException("Missing the required parameter 'postCategoryId' when calling apiV1PostsPost(Async)");
        }
        // verify the required parameter 'postFiles' is set
        if (postFiles == null) {
            throw new ApiException("Missing the required parameter 'postFiles' when calling apiV1PostsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1PostsPostCall(postTitle, postBody, postCategoryId, postFiles, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * create multipart form
     * 
     * @param postTitle  (required)
     * @param postBody  (required)
     * @param postCategoryId  (required)
     * @param postFiles  (required)
     * @param authorization JWT token for Authorization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1PostsPost(String postTitle, String postBody, Integer postCategoryId, File postFiles, String authorization) throws ApiException {
        apiV1PostsPostWithHttpInfo(postTitle, postBody, postCategoryId, postFiles, authorization);
    }

    /**
     * create multipart form
     * 
     * @param postTitle  (required)
     * @param postBody  (required)
     * @param postCategoryId  (required)
     * @param postFiles  (required)
     * @param authorization JWT token for Authorization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1PostsPostWithHttpInfo(String postTitle, String postBody, Integer postCategoryId, File postFiles, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = apiV1PostsPostValidateBeforeCall(postTitle, postBody, postCategoryId, postFiles, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * create multipart form (asynchronously)
     * 
     * @param postTitle  (required)
     * @param postBody  (required)
     * @param postCategoryId  (required)
     * @param postFiles  (required)
     * @param authorization JWT token for Authorization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsPostAsync(String postTitle, String postBody, Integer postCategoryId, File postFiles, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1PostsPostValidateBeforeCall(postTitle, postBody, postCategoryId, postFiles, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
