/*
 * API V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserMultipartformDataApi {
    private ApiClient apiClient;

    public UserMultipartformDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserMultipartformDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1UsersPost
     * @param userName  (required)
     * @param userUsername  (required)
     * @param userEmail  (required)
     * @param userPassword  (required)
     * @param userPasswordConfirmation  (required)
     * @param userAvatar  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UsersPostCall(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (userName != null)
        localVarFormParams.put("user[name]", userName);
        if (userUsername != null)
        localVarFormParams.put("user[username]", userUsername);
        if (userEmail != null)
        localVarFormParams.put("user[email]", userEmail);
        if (userPassword != null)
        localVarFormParams.put("user[password]", userPassword);
        if (userPasswordConfirmation != null)
        localVarFormParams.put("user[password_confirmation]", userPasswordConfirmation);
        if (userAvatar != null)
        localVarFormParams.put("user[avatar]", userAvatar);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UsersPostValidateBeforeCall(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling apiV1UsersPost(Async)");
        }
        // verify the required parameter 'userUsername' is set
        if (userUsername == null) {
            throw new ApiException("Missing the required parameter 'userUsername' when calling apiV1UsersPost(Async)");
        }
        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling apiV1UsersPost(Async)");
        }
        // verify the required parameter 'userPassword' is set
        if (userPassword == null) {
            throw new ApiException("Missing the required parameter 'userPassword' when calling apiV1UsersPost(Async)");
        }
        // verify the required parameter 'userPasswordConfirmation' is set
        if (userPasswordConfirmation == null) {
            throw new ApiException("Missing the required parameter 'userPasswordConfirmation' when calling apiV1UsersPost(Async)");
        }
        // verify the required parameter 'userAvatar' is set
        if (userAvatar == null) {
            throw new ApiException("Missing the required parameter 'userAvatar' when calling apiV1UsersPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1UsersPostCall(userName, userUsername, userEmail, userPassword, userPasswordConfirmation, userAvatar, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * create user
     * 
     * @param userName  (required)
     * @param userUsername  (required)
     * @param userEmail  (required)
     * @param userPassword  (required)
     * @param userPasswordConfirmation  (required)
     * @param userAvatar  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1UsersPost(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar) throws ApiException {
        apiV1UsersPostWithHttpInfo(userName, userUsername, userEmail, userPassword, userPasswordConfirmation, userAvatar);
    }

    /**
     * create user
     * 
     * @param userName  (required)
     * @param userUsername  (required)
     * @param userEmail  (required)
     * @param userPassword  (required)
     * @param userPasswordConfirmation  (required)
     * @param userAvatar  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1UsersPostWithHttpInfo(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UsersPostValidateBeforeCall(userName, userUsername, userEmail, userPassword, userPasswordConfirmation, userAvatar, null, null);
        return apiClient.execute(call);
    }

    /**
     * create user (asynchronously)
     * 
     * @param userName  (required)
     * @param userUsername  (required)
     * @param userEmail  (required)
     * @param userPassword  (required)
     * @param userPasswordConfirmation  (required)
     * @param userAvatar  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UsersPostAsync(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UsersPostValidateBeforeCall(userName, userUsername, userEmail, userPassword, userPasswordConfirmation, userAvatar, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiV1UsersUsernamePut
     * @param userName  (required)
     * @param userUsername  (required)
     * @param userEmail  (required)
     * @param userPassword  (required)
     * @param userPasswordConfirmation  (required)
     * @param userAvatar  (required)
     * @param _username username (required)
     * @param authorization JWT token for Authorization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UsersUsernamePutCall(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar, Object _username, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/users/{_username}"
            .replaceAll("\\{" + "_username" + "\\}", apiClient.escapeString(_username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (userName != null)
        localVarFormParams.put("user[name]", userName);
        if (userUsername != null)
        localVarFormParams.put("user[username]", userUsername);
        if (userEmail != null)
        localVarFormParams.put("user[email]", userEmail);
        if (userPassword != null)
        localVarFormParams.put("user[password]", userPassword);
        if (userPasswordConfirmation != null)
        localVarFormParams.put("user[password_confirmation]", userPasswordConfirmation);
        if (userAvatar != null)
        localVarFormParams.put("user[avatar]", userAvatar);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UsersUsernamePutValidateBeforeCall(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar, Object _username, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling apiV1UsersUsernamePut(Async)");
        }
        // verify the required parameter 'userUsername' is set
        if (userUsername == null) {
            throw new ApiException("Missing the required parameter 'userUsername' when calling apiV1UsersUsernamePut(Async)");
        }
        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling apiV1UsersUsernamePut(Async)");
        }
        // verify the required parameter 'userPassword' is set
        if (userPassword == null) {
            throw new ApiException("Missing the required parameter 'userPassword' when calling apiV1UsersUsernamePut(Async)");
        }
        // verify the required parameter 'userPasswordConfirmation' is set
        if (userPasswordConfirmation == null) {
            throw new ApiException("Missing the required parameter 'userPasswordConfirmation' when calling apiV1UsersUsernamePut(Async)");
        }
        // verify the required parameter 'userAvatar' is set
        if (userAvatar == null) {
            throw new ApiException("Missing the required parameter 'userAvatar' when calling apiV1UsersUsernamePut(Async)");
        }
        // verify the required parameter '_username' is set
        if (_username == null) {
            throw new ApiException("Missing the required parameter '_username' when calling apiV1UsersUsernamePut(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1UsersUsernamePutCall(userName, userUsername, userEmail, userPassword, userPasswordConfirmation, userAvatar, _username, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update user
     * 
     * @param userName  (required)
     * @param userUsername  (required)
     * @param userEmail  (required)
     * @param userPassword  (required)
     * @param userPasswordConfirmation  (required)
     * @param userAvatar  (required)
     * @param _username username (required)
     * @param authorization JWT token for Authorization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1UsersUsernamePut(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar, Object _username, String authorization) throws ApiException {
        apiV1UsersUsernamePutWithHttpInfo(userName, userUsername, userEmail, userPassword, userPasswordConfirmation, userAvatar, _username, authorization);
    }

    /**
     * update user
     * 
     * @param userName  (required)
     * @param userUsername  (required)
     * @param userEmail  (required)
     * @param userPassword  (required)
     * @param userPasswordConfirmation  (required)
     * @param userAvatar  (required)
     * @param _username username (required)
     * @param authorization JWT token for Authorization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1UsersUsernamePutWithHttpInfo(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar, Object _username, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UsersUsernamePutValidateBeforeCall(userName, userUsername, userEmail, userPassword, userPasswordConfirmation, userAvatar, _username, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * update user (asynchronously)
     * 
     * @param userName  (required)
     * @param userUsername  (required)
     * @param userEmail  (required)
     * @param userPassword  (required)
     * @param userPasswordConfirmation  (required)
     * @param userAvatar  (required)
     * @param _username username (required)
     * @param authorization JWT token for Authorization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UsersUsernamePutAsync(String userName, String userUsername, String userEmail, String userPassword, String userPasswordConfirmation, File userAvatar, Object _username, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UsersUsernamePutValidateBeforeCall(userName, userUsername, userEmail, userPassword, userPasswordConfirmation, userAvatar, _username, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
