/*
 * API V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Post;
import io.swagger.client.model.PostParam;
import io.swagger.client.model.Posts;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostApi {
    private ApiClient apiClient;

    public PostApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1PostsGet
     * @param authorization JWT token for Authorization (optional)
     * @param categoryId Category Id (optional)
     * @param page Page number (optional)
     * @param per Per page number (optional)
     * @param commentPage Page number for Comment (optional)
     * @param commentPer Per page number For Comment (optional)
     * @param search Search Keyword (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsGetCall(String authorization, Integer categoryId, Integer page, Integer per, Integer commentPage, Integer commentPer, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category_id", categoryId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (per != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per", per));
        if (commentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment_page", commentPage));
        if (commentPer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment_per", commentPer));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1PostsGetValidateBeforeCall(String authorization, Integer categoryId, Integer page, Integer per, Integer commentPage, Integer commentPer, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = apiV1PostsGetCall(authorization, categoryId, page, per, commentPage, commentPer, search, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * list posts
     * 
     * @param authorization JWT token for Authorization (optional)
     * @param categoryId Category Id (optional)
     * @param page Page number (optional)
     * @param per Per page number (optional)
     * @param commentPage Page number for Comment (optional)
     * @param commentPer Per page number For Comment (optional)
     * @param search Search Keyword (optional)
     * @return Posts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Posts apiV1PostsGet(String authorization, Integer categoryId, Integer page, Integer per, Integer commentPage, Integer commentPer, String search) throws ApiException {
        ApiResponse<Posts> resp = apiV1PostsGetWithHttpInfo(authorization, categoryId, page, per, commentPage, commentPer, search);
        return resp.getData();
    }

    /**
     * list posts
     * 
     * @param authorization JWT token for Authorization (optional)
     * @param categoryId Category Id (optional)
     * @param page Page number (optional)
     * @param per Per page number (optional)
     * @param commentPage Page number for Comment (optional)
     * @param commentPer Per page number For Comment (optional)
     * @param search Search Keyword (optional)
     * @return ApiResponse&lt;Posts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Posts> apiV1PostsGetWithHttpInfo(String authorization, Integer categoryId, Integer page, Integer per, Integer commentPage, Integer commentPer, String search) throws ApiException {
        com.squareup.okhttp.Call call = apiV1PostsGetValidateBeforeCall(authorization, categoryId, page, per, commentPage, commentPer, search, null, null);
        Type localVarReturnType = new TypeToken<Posts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * list posts (asynchronously)
     * 
     * @param authorization JWT token for Authorization (optional)
     * @param categoryId Category Id (optional)
     * @param page Page number (optional)
     * @param per Per page number (optional)
     * @param commentPage Page number for Comment (optional)
     * @param commentPer Per page number For Comment (optional)
     * @param search Search Keyword (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsGetAsync(String authorization, Integer categoryId, Integer page, Integer per, Integer commentPage, Integer commentPer, String search, final ApiCallback<Posts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1PostsGetValidateBeforeCall(authorization, categoryId, page, per, commentPage, commentPer, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Posts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1PostsIdDelete
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdDeleteCall(String id, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/posts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1PostsIdDeleteValidateBeforeCall(String id, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1PostsIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1PostsIdDeleteCall(id, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete post
     * 
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1PostsIdDelete(String id, String authorization) throws ApiException {
        apiV1PostsIdDeleteWithHttpInfo(id, authorization);
    }

    /**
     * delete post
     * 
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1PostsIdDeleteWithHttpInfo(String id, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = apiV1PostsIdDeleteValidateBeforeCall(id, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * delete post (asynchronously)
     * 
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdDeleteAsync(String id, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1PostsIdDeleteValidateBeforeCall(id, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for apiV1PostsIdGet
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param commentPage Page number for Comment (optional)
     * @param commentPer Per page number For Comment (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdGetCall(String id, String authorization, Integer commentPage, Integer commentPer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/posts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (commentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment_page", commentPage));
        if (commentPer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comment_per", commentPer));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1PostsIdGetValidateBeforeCall(String id, String authorization, Integer commentPage, Integer commentPer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1PostsIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1PostsIdGetCall(id, authorization, commentPage, commentPer, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * show post
     * 
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param commentPage Page number for Comment (optional)
     * @param commentPer Per page number For Comment (optional)
     * @return Post
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Post apiV1PostsIdGet(String id, String authorization, Integer commentPage, Integer commentPer) throws ApiException {
        ApiResponse<Post> resp = apiV1PostsIdGetWithHttpInfo(id, authorization, commentPage, commentPer);
        return resp.getData();
    }

    /**
     * show post
     * 
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param commentPage Page number for Comment (optional)
     * @param commentPer Per page number For Comment (optional)
     * @return ApiResponse&lt;Post&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Post> apiV1PostsIdGetWithHttpInfo(String id, String authorization, Integer commentPage, Integer commentPer) throws ApiException {
        com.squareup.okhttp.Call call = apiV1PostsIdGetValidateBeforeCall(id, authorization, commentPage, commentPer, null, null);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * show post (asynchronously)
     * 
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param commentPage Page number for Comment (optional)
     * @param commentPer Per page number For Comment (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdGetAsync(String id, String authorization, Integer commentPage, Integer commentPer, final ApiCallback<Post> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1PostsIdGetValidateBeforeCall(id, authorization, commentPage, commentPer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1PostsIdPut
     * @param body  (required)
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdPutCall(PostParam body, String id, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/posts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1PostsIdPutValidateBeforeCall(PostParam body, String id, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1PostsIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1PostsIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1PostsIdPutCall(body, id, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update post
     * 
     * @param body  (required)
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @return Post
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Post apiV1PostsIdPut(PostParam body, String id, String authorization) throws ApiException {
        ApiResponse<Post> resp = apiV1PostsIdPutWithHttpInfo(body, id, authorization);
        return resp.getData();
    }

    /**
     * update post
     * 
     * @param body  (required)
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @return ApiResponse&lt;Post&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Post> apiV1PostsIdPutWithHttpInfo(PostParam body, String id, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = apiV1PostsIdPutValidateBeforeCall(body, id, authorization, null, null);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * update post (asynchronously)
     * 
     * @param body  (required)
     * @param id id (required)
     * @param authorization JWT token for Authorization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsIdPutAsync(PostParam body, String id, String authorization, final ApiCallback<Post> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1PostsIdPutValidateBeforeCall(body, id, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1PostsPost
     * @param body  (required)
     * @param authorization JWT token for Authorization (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsPostCall(PostParam body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1PostsPostValidateBeforeCall(PostParam body, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1PostsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1PostsPostCall(body, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * create post
     * 
     * @param body  (required)
     * @param authorization JWT token for Authorization (optional)
     * @return Post
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Post apiV1PostsPost(PostParam body, String authorization) throws ApiException {
        ApiResponse<Post> resp = apiV1PostsPostWithHttpInfo(body, authorization);
        return resp.getData();
    }

    /**
     * create post
     * 
     * @param body  (required)
     * @param authorization JWT token for Authorization (optional)
     * @return ApiResponse&lt;Post&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Post> apiV1PostsPostWithHttpInfo(PostParam body, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = apiV1PostsPostValidateBeforeCall(body, authorization, null, null);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create post (asynchronously)
     * 
     * @param body  (required)
     * @param authorization JWT token for Authorization (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1PostsPostAsync(PostParam body, String authorization, final ApiCallback<Post> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1PostsPostValidateBeforeCall(body, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Post>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
